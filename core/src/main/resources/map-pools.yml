#
# PGM
# Map pool configuration.

pools:
  # A map pool named "default".
  default:

    # A type of map pool.
    #
    #  "ordered"  = maps are played in the provided order.
    #  "shuffled" = maps are played in random order.
    #  "voted"    = players vote on which maps are played next.
    type: ordered

    # Is this map pool enabled?
    enabled: true

    # Is this map pool dynamic?
    #
    # If true, the pool is only enabled when the number of players
    # on the server reaches the "players" threshold.
    dynamic: true
    players: 1
    
    # How long should a map cycle last?
    cycle-time: "15s"

    # Map variants to use, in order, if they exist
    variants:
      - default

    # Voted pool only: num of maps to show each vote
    vote-options: 5
    # Voted pool only: modify how score behaves
    score:
      # How much score should maps start with by default.
      default: 0.2
      # How much score decreases/increases after each match. Null to be proportional to amount of maps.
      decay: null
      rise: null
      # When a map is voted, enforce that it never falls out of the range of:
      min-after-vote: 0.01 # 1%, avoids fully discarding the map
      max-after-vote: 1
      # Maps with less than this are ignored for a vote
      min-for-vote: 0.01
      # After the map plays, reset the score to:
      # Supports a formula with play_minutes
      after-playing: 0

    # Voted pools support modifiers which come in the form of a formula (does not affect any other type of pool).
    #
    # This formula is parsed by exp4j library, it's quite flexible and supports many built-in functions.
    #
    # On top of that PGM implements:
    # - bound(val, min, max)
    #
    # Available variables:
    #  - score: the maps' score, determined by percentage of players who voted for it, or a default
    #  - same_gamemode: amount of other maps of the same gamemode already picked for the vote
    #  - mapsize: the size for this map in total players (sum of all team counts)
    #  - players: amount of active players online (eg: obs count as half)
    #
    # WARNING: this is a complicated setting to modify on your own, it is not
    #          recommended to modify it on your own unless you know what you're doing.
    #
    # The provided formula can dynamically pick best-sized map for a current player count, some alternatives:
    #  - Make it so low scores are less-likely than higher scores (previous default)
    #    pow(score, 2)
    #  - Make it so repeated gamemodes on the same vote are 35% less likely each time, down to a minimum of 20%
    #    pow(score * bound(1 - (0.35 * same_gamemode), 0.2, 1), 2)
    modifier: >-
      pow(
        score * 
        bound(1 - (0.2 * same_gamemode), 0.2, 1) *
        bound(0.5 * (
          tanh(bound(-0.0025 * players + 0.5, 0.2, 1) * (mapsize - bound(players * 1.05, 0, 100))) -
          tanh(bound(-0.0025 * players + 0.5, 0.2, 1) * (mapsize - bound(0.005 * players ^ 2 + 0.95 * players + 5, 10, 150)))
        ), 0, 1)
      , 2)

    # A list of map names in this pool.
    # Uses map name given in map.xml, do not use folder name.
    # Names are case-sensitive.
    maps:
      - Airship Battle
      - Harb
      - Race for Victory
      - The Fenland
      - Warlock
