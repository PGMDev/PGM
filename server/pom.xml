<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <project.mainClass>tc.oc.pgm.server.PGMServer</project.mainClass>
    </properties>

    <parent>
        <relativePath>../pom.xml</relativePath>
        <version>1.8-SNAPSHOT</version>
        <groupId>tc.oc.pgm</groupId>
        <artifactId>PGM</artifactId>
    </parent>

    <name>Server</name>
    <artifactId>server</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>tc.oc.pgm</groupId>
            <artifactId>core</artifactId>
            <version>1.8-SNAPSHOT</version>
        </dependency>

        <!-- Older version of log4j logging library that barely works -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.12</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <!-- Ensures that all classes are loaded into the jar -->
                    <minimizeJar>false</minimizeJar>
                    <artifactSet>
                        <excludes>
                            <exclude>tc.oc.pgm:util-bukkit:*</exclude>
                            <exclude>tc.oc.pgm:util:*</exclude>
                            <exclude>app.ashcon.intake:intake-bukkit:*</exclude>
                            <exclude>com.google.guava:guava:*</exclude>
                            <exclude>com.google.code.gson:gson:*</exclude>
                            <exclude>com.google.code.findbugs:annotations:*</exclude>
                            <exclude>net.sf.trove4j:trove4j:*</exclude>
                            <exclude>org.checkerframework:checker-qual:*</exclude>
                            <exclude>org.xerial:sqlite-jdbc:*</exclude>
                            <exclude>joda-time:joda-time:*</exclude>
                            <exclude>net.kyori:*:*</exclude>
                        </excludes>
                    </artifactSet>
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>META-INF/**</exclude>
                                <exclude>module-info.class</exclude>
                            </excludes>
                        </filter>
                        <filter>
                            <artifact>tc.oc.pgm:core:*</artifact>
                            <excludes>
                                <exclude>org/jdom2/**</exclude>
                                <exclude>com/google/gson/**</exclude>
                            </excludes>
                        </filter>
                    </filters>
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>${project.mainClass}</mainClass>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Generates a /server folder for debugging purposes -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <configuration>
                            <target>
                                <copy file="${basedir}/target/${project.build.finalName}.jar" tofile="../target/PGM-Server.jar"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Optionally, builds an "out-of-the-box" PGM server as a Docker image -->
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>2.1.0</version>
                <configuration>
                    <from>
                        <image>shipilev/openjdk-shenandoah:8</image>
                    </from>
                    <to>
                        <image>pgm</image>
                        <tags>
                            <tag>latest</tag>
                        </tags>
                    </to>
                    <container>
                        <jvmFlags>
                            <jvmFlag>-XX:+UnlockExperimentalVMOptions</jvmFlag>
                            <jvmFlag>-XX:+UseContainerSupport</jvmFlag>
                            <jvmFlag>-XX:+AggressiveOpts</jvmFlag>
                            <jvmFlag>-XX:+UseShenandoahGC</jvmFlag>
                            <jvmFlag>-XX:+AlwaysPreTouch</jvmFlag>
                            <jvmFlag>-XX:+ParallelRefProcEnabled</jvmFlag>
                            <jvmFlag>-XX:+UseLargePagesInMetaspace</jvmFlag>
                            <jvmFlag>-XX:+UseNUMA</jvmFlag>
                            <jvmFlag>-XX:-UseBiasedLocking</jvmFlag>
                            <jvmFlag>-XX:+DisableExplicitGC</jvmFlag>
                        </jvmFlags>
                        <ports>
                            <port>25565/tcp</port>
                        </ports>
                        <volumes>
                            <volume>/server</volume>
                        </volumes>
                        <workingDirectory>/server</workingDirectory>
                    </container>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
